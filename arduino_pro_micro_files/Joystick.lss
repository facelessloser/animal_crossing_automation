
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000de0  00000e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080011c  0080011c  00000e90  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046fe  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001094  00000000  00000000  00005822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bd1  00000000  00000000  000068b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  00009488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ebf  00000000  00000000  00009b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ba2  00000000  00000000  0000b9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000e561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	db c0       	rjmp	.+438    	; 0x1bc <__bad_interrupt>
   6:	00 00       	nop
   8:	d9 c0       	rjmp	.+434    	; 0x1bc <__bad_interrupt>
   a:	00 00       	nop
   c:	d7 c0       	rjmp	.+430    	; 0x1bc <__bad_interrupt>
   e:	00 00       	nop
  10:	d5 c0       	rjmp	.+426    	; 0x1bc <__bad_interrupt>
  12:	00 00       	nop
  14:	d3 c0       	rjmp	.+422    	; 0x1bc <__bad_interrupt>
  16:	00 00       	nop
  18:	d1 c0       	rjmp	.+418    	; 0x1bc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cf c0       	rjmp	.+414    	; 0x1bc <__bad_interrupt>
  1e:	00 00       	nop
  20:	cd c0       	rjmp	.+410    	; 0x1bc <__bad_interrupt>
  22:	00 00       	nop
  24:	cb c0       	rjmp	.+406    	; 0x1bc <__bad_interrupt>
  26:	00 00       	nop
  28:	9d c4       	rjmp	.+2362   	; 0x964 <__vector_10>
  2a:	00 00       	nop
  2c:	c7 c0       	rjmp	.+398    	; 0x1bc <__bad_interrupt>
  2e:	00 00       	nop
  30:	c5 c0       	rjmp	.+394    	; 0x1bc <__bad_interrupt>
  32:	00 00       	nop
  34:	c3 c0       	rjmp	.+390    	; 0x1bc <__bad_interrupt>
  36:	00 00       	nop
  38:	c1 c0       	rjmp	.+386    	; 0x1bc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bf c0       	rjmp	.+382    	; 0x1bc <__bad_interrupt>
  3e:	00 00       	nop
  40:	bd c0       	rjmp	.+378    	; 0x1bc <__bad_interrupt>
  42:	00 00       	nop
  44:	bb c0       	rjmp	.+374    	; 0x1bc <__bad_interrupt>
  46:	00 00       	nop
  48:	b9 c0       	rjmp	.+370    	; 0x1bc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b7 c0       	rjmp	.+366    	; 0x1bc <__bad_interrupt>
  4e:	00 00       	nop
  50:	b5 c0       	rjmp	.+362    	; 0x1bc <__bad_interrupt>
  52:	00 00       	nop
  54:	b3 c0       	rjmp	.+358    	; 0x1bc <__bad_interrupt>
  56:	00 00       	nop
  58:	b1 c0       	rjmp	.+354    	; 0x1bc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	af c0       	rjmp	.+350    	; 0x1bc <__bad_interrupt>
  5e:	00 00       	nop
  60:	ad c0       	rjmp	.+346    	; 0x1bc <__bad_interrupt>
  62:	00 00       	nop
  64:	ab c0       	rjmp	.+342    	; 0x1bc <__bad_interrupt>
  66:	00 00       	nop
  68:	a9 c0       	rjmp	.+338    	; 0x1bc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a7 c0       	rjmp	.+334    	; 0x1bc <__bad_interrupt>
  6e:	00 00       	nop
  70:	a5 c0       	rjmp	.+330    	; 0x1bc <__bad_interrupt>
  72:	00 00       	nop
  74:	a3 c0       	rjmp	.+326    	; 0x1bc <__bad_interrupt>
  76:	00 00       	nop
  78:	a1 c0       	rjmp	.+322    	; 0x1bc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9f c0       	rjmp	.+318    	; 0x1bc <__bad_interrupt>
  7e:	00 00       	nop
  80:	9d c0       	rjmp	.+314    	; 0x1bc <__bad_interrupt>
  82:	00 00       	nop
  84:	9b c0       	rjmp	.+310    	; 0x1bc <__bad_interrupt>
  86:	00 00       	nop
  88:	99 c0       	rjmp	.+306    	; 0x1bc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	97 c0       	rjmp	.+302    	; 0x1bc <__bad_interrupt>
  8e:	00 00       	nop
  90:	95 c0       	rjmp	.+298    	; 0x1bc <__bad_interrupt>
  92:	00 00       	nop
  94:	93 c0       	rjmp	.+294    	; 0x1bc <__bad_interrupt>
  96:	00 00       	nop
  98:	91 c0       	rjmp	.+290    	; 0x1bc <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8f c0       	rjmp	.+286    	; 0x1bc <__bad_interrupt>
  9e:	00 00       	nop
  a0:	8d c0       	rjmp	.+282    	; 0x1bc <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8b c0       	rjmp	.+278    	; 0x1bc <__bad_interrupt>
  a6:	00 00       	nop
  a8:	89 c0       	rjmp	.+274    	; 0x1bc <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
  bc:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
  cc:	45 00 52 00 00 00                                   E.R...

000000d2 <ManufacturerString>:
  d2:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  e2:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000f0 <LanguageString>:
  f0:	04 03 09 04                                         ....

000000f4 <ConfigurationDescriptor>:
  f4:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
 104:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
 114:	00 05 07 05 81 03 40 00 05                          ......@..

0000011d <DeviceDescriptor>:
 11d:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
 12d:	00 01                                               ..

0000012f <JoystickReport>:
 12f:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 13f:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
 14f:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
 15f:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
 16f:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
 17f:	26 95 08 91 02 c0 00                                &......

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	da e0       	ldi	r29, 0x0A	; 10
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
 192:	11 e0       	ldi	r17, 0x01	; 1
 194:	a0 e0       	ldi	r26, 0x00	; 0
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	e0 ee       	ldi	r30, 0xE0	; 224
 19a:	fd e0       	ldi	r31, 0x0D	; 13
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <__do_copy_data+0x10>
 19e:	05 90       	lpm	r0, Z+
 1a0:	0d 92       	st	X+, r0
 1a2:	ac 31       	cpi	r26, 0x1C	; 28
 1a4:	b1 07       	cpc	r27, r17
 1a6:	d9 f7       	brne	.-10     	; 0x19e <__do_copy_data+0xc>

000001a8 <__do_clear_bss>:
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	ac e1       	ldi	r26, 0x1C	; 28
 1ac:	b1 e0       	ldi	r27, 0x01	; 1
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <.do_clear_bss_start>

000001b0 <.do_clear_bss_loop>:
 1b0:	1d 92       	st	X+, r1

000001b2 <.do_clear_bss_start>:
 1b2:	a0 34       	cpi	r26, 0x40	; 64
 1b4:	b2 07       	cpc	r27, r18
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <.do_clear_bss_loop>
 1b8:	51 d1       	rcall	.+674    	; 0x45c <main>
 1ba:	10 c6       	rjmp	.+3104   	; 0xddc <_exit>

000001bc <__bad_interrupt>:
 1bc:	21 cf       	rjmp	.-446    	; 0x0 <__vectors>

000001be <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
 1be:	84 b7       	in	r24, 0x34	; 52
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	a8 95       	wdr
 1ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1ce:	88 61       	ori	r24, 0x18	; 24
 1d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1d4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1d8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1e6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1ea:	0f be       	out	0x3f, r0	; 63
                  //We'll just flash all pins on both ports since the UNO R3
	DDRB  = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB =  0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
	#endif
	// The USB stack should be initialized last.
	USB_Init();
 1ec:	9e c3       	rjmp	.+1852   	; 0x92a <USB_Init>

000001ee <EVENT_USB_Device_Connect>:
}

// Fired to indicate that the device is enumerating.
void EVENT_USB_Device_Connect(void) {
 1ee:	08 95       	ret

000001f0 <EVENT_USB_Device_Disconnect>:
	// We can indicate that we're enumerating here (via status LEDs, sound, etc.).
}

// Fired to indicate that the device is no longer connected to a host.
void EVENT_USB_Device_Disconnect(void) {
 1f0:	08 95       	ret

000001f2 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1f2:	42 e3       	ldi	r20, 0x32	; 50
 1f4:	60 ec       	ldi	r22, 0xC0	; 192
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	d2 d2       	rcall	.+1444   	; 0x79e <Endpoint_ConfigureEndpoint_Prv>
 1fa:	42 e3       	ldi	r20, 0x32	; 50
 1fc:	61 ec       	ldi	r22, 0xC1	; 193
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	ce c2       	rjmp	.+1436   	; 0x79e <Endpoint_ConfigureEndpoint_Prv>

00000202 <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
 202:	08 95       	ret

00000204 <GetNextReport>:
int bufindex = 0;
int duration_count = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
 204:	dc 01       	movw	r26, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
 206:	98 e0       	ldi	r25, 0x08	; 8
 208:	fd 01       	movw	r30, r26
 20a:	89 2f       	mov	r24, r25
 20c:	11 92       	st	Z+, r1
 20e:	8a 95       	dec	r24
 210:	e9 f7       	brne	.-6      	; 0x20c <GetNextReport+0x8>
	ReportData->LX = STICK_CENTER;
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	8c 93       	st	X, r24
 218:	13 97       	sbiw	r26, 0x03	; 3
	ReportData->LY = STICK_CENTER;
 21a:	14 96       	adiw	r26, 0x04	; 4
 21c:	8c 93       	st	X, r24
 21e:	14 97       	sbiw	r26, 0x04	; 4
	ReportData->RX = STICK_CENTER;
 220:	15 96       	adiw	r26, 0x05	; 5
 222:	8c 93       	st	X, r24
 224:	15 97       	sbiw	r26, 0x05	; 5
	ReportData->RY = STICK_CENTER;
 226:	16 96       	adiw	r26, 0x06	; 6
 228:	8c 93       	st	X, r24
 22a:	16 97       	sbiw	r26, 0x06	; 6
	ReportData->HAT = HAT_CENTER;
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	12 97       	sbiw	r26, 0x02	; 2

	// Repeat ECHOES times the last report
	if (echoes > 0)
 232:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <echoes>
 236:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <echoes+0x1>
 23a:	18 16       	cp	r1, r24
 23c:	19 06       	cpc	r1, r25
 23e:	6c f4       	brge	.+26     	; 0x25a <GetNextReport+0x56>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
 240:	88 e0       	ldi	r24, 0x08	; 8
 242:	eb e2       	ldi	r30, 0x2B	; 43
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	01 90       	ld	r0, Z+
 248:	0d 92       	st	X+, r0
 24a:	8a 95       	dec	r24
 24c:	e1 f7       	brne	.-8      	; 0x246 <GetNextReport+0x42>
		echoes--;
 24e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <echoes>
 252:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <echoes+0x1>
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	b4 c0       	rjmp	.+360    	; 0x3c2 <GetNextReport+0x1be>
		return;
	}

	// States and moves management
	switch (state)
 25a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	c1 f0       	breq	.+48     	; 0x292 <GetNextReport+0x8e>
 262:	68 f4       	brcc	.+26     	; 0x27e <GetNextReport+0x7a>
 264:	88 23       	and	r24, r24
 266:	99 f0       	breq	.+38     	; 0x28e <GetNextReport+0x8a>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	09 f0       	breq	.+2      	; 0x26e <GetNextReport+0x6a>
 26c:	a0 c0       	rjmp	.+320    	; 0x3ae <GetNextReport+0x1aa>
		// 	}
		// 	report_count++;
		// 	break;

		case SYNC_POSITION:
			bufindex = 0;
 26e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <bufindex+0x1>
 272:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <bufindex>


			ReportData->Button = 0;
 276:	11 96       	adiw	r26, 0x01	; 1
 278:	1c 92       	st	X, r1
 27a:	1e 92       	st	-X, r1
 27c:	08 c0       	rjmp	.+16     	; 0x28e <GetNextReport+0x8a>
		echoes--;
		return;
	}

	// States and moves management
	switch (state)
 27e:	84 30       	cpi	r24, 0x04	; 4
 280:	09 f4       	brne	.+2      	; 0x284 <GetNextReport+0x80>
 282:	92 c0       	rjmp	.+292    	; 0x3a8 <GetNextReport+0x1a4>
 284:	40 f0       	brcs	.+16     	; 0x296 <GetNextReport+0x92>
 286:	85 30       	cpi	r24, 0x05	; 5
 288:	09 f4       	brne	.+2      	; 0x28c <GetNextReport+0x88>
 28a:	9f c0       	rjmp	.+318    	; 0x3ca <GetNextReport+0x1c6>
 28c:	90 c0       	rjmp	.+288    	; 0x3ae <GetNextReport+0x1aa>
			ReportData->RX = STICK_CENTER;
			ReportData->RY = STICK_CENTER;
			ReportData->HAT = HAT_CENTER;


			state = BREATHE;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	8c c0       	rjmp	.+280    	; 0x3aa <GetNextReport+0x1a6>
			break;

		case BREATHE:
			state = PROCESS;
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	8a c0       	rjmp	.+276    	; 0x3aa <GetNextReport+0x1a6>
			break;

		case PROCESS:

			switch (step[bufindex].button)
 296:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bufindex>
 29a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <bufindex+0x1>
 29e:	fc 01       	movw	r30, r24
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	8e 0f       	add	r24, r30
 2a6:	9f 1f       	adc	r25, r31
 2a8:	fc 01       	movw	r30, r24
 2aa:	e0 50       	subi	r30, 0x00	; 0
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	80 81       	ld	r24, Z
 2b0:	86 30       	cpi	r24, 0x06	; 6
 2b2:	69 f1       	breq	.+90     	; 0x30e <GetNextReport+0x10a>
 2b4:	60 f4       	brcc	.+24     	; 0x2ce <GetNextReport+0xca>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	29 f1       	breq	.+74     	; 0x304 <GetNextReport+0x100>
 2ba:	e0 f0       	brcs	.+56     	; 0x2f4 <GetNextReport+0xf0>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	f1 f0       	breq	.+60     	; 0x2fc <GetNextReport+0xf8>
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	a1 f5       	brne	.+104    	; 0x32c <GetNextReport+0x128>
				case DOWN:
					ReportData->LY = STICK_MAX;				
					break;

				case RIGHT:
					ReportData->LX = STICK_MAX;				
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	13 96       	adiw	r26, 0x03	; 3
 2c8:	8c 93       	st	X, r24
 2ca:	13 97       	sbiw	r26, 0x03	; 3
					break;
 2cc:	2f c0       	rjmp	.+94     	; 0x32c <GetNextReport+0x128>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2ce:	89 30       	cpi	r24, 0x09	; 9
 2d0:	31 f1       	breq	.+76     	; 0x31e <GetNextReport+0x11a>
 2d2:	38 f4       	brcc	.+14     	; 0x2e2 <GetNextReport+0xde>
 2d4:	87 30       	cpi	r24, 0x07	; 7
 2d6:	51 f5       	brne	.+84     	; 0x32c <GetNextReport+0x128>
				case A:
					ReportData->Button |= SWITCH_A;
					break;

				case B:
					ReportData->Button |= SWITCH_B;
 2d8:	8d 91       	ld	r24, X+
 2da:	9c 91       	ld	r25, X
 2dc:	11 97       	sbiw	r26, 0x01	; 1
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	22 c0       	rjmp	.+68     	; 0x326 <GetNextReport+0x122>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2e2:	8a 30       	cpi	r24, 0x0A	; 10
 2e4:	c9 f0       	breq	.+50     	; 0x318 <GetNextReport+0x114>
 2e6:	8c 30       	cpi	r24, 0x0C	; 12
 2e8:	09 f5       	brne	.+66     	; 0x32c <GetNextReport+0x128>
					ReportData->LY = STICK_MIN;				
					ReportData->Button |= SWITCH_R;
					break;

				case TRIGGERS:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 2ea:	8d 91       	ld	r24, X+
 2ec:	9c 91       	ld	r25, X
 2ee:	11 97       	sbiw	r26, 0x01	; 1
 2f0:	80 63       	ori	r24, 0x30	; 48
 2f2:	19 c0       	rjmp	.+50     	; 0x326 <GetNextReport+0x122>

			switch (step[bufindex].button)
			{

				case UP:
					ReportData->LY = STICK_MIN;				
 2f4:	14 96       	adiw	r26, 0x04	; 4
 2f6:	1c 92       	st	X, r1
 2f8:	14 97       	sbiw	r26, 0x04	; 4
					break;
 2fa:	18 c0       	rjmp	.+48     	; 0x32c <GetNextReport+0x128>

				case LEFT:
					ReportData->LX = STICK_MIN;				
 2fc:	13 96       	adiw	r26, 0x03	; 3
 2fe:	1c 92       	st	X, r1
 300:	13 97       	sbiw	r26, 0x03	; 3
					break;
 302:	14 c0       	rjmp	.+40     	; 0x32c <GetNextReport+0x128>

				case DOWN:
					ReportData->LY = STICK_MAX;				
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	14 96       	adiw	r26, 0x04	; 4
 308:	8c 93       	st	X, r24
 30a:	14 97       	sbiw	r26, 0x04	; 4
					break;
 30c:	0f c0       	rjmp	.+30     	; 0x32c <GetNextReport+0x128>
				case RIGHT:
					ReportData->LX = STICK_MAX;				
					break;

				case A:
					ReportData->Button |= SWITCH_A;
 30e:	8d 91       	ld	r24, X+
 310:	9c 91       	ld	r25, X
 312:	11 97       	sbiw	r26, 0x01	; 1
 314:	84 60       	ori	r24, 0x04	; 4
 316:	07 c0       	rjmp	.+14     	; 0x326 <GetNextReport+0x122>
				case R:
					ReportData->Button |= SWITCH_R;
					break;

				case THROW:
					ReportData->LY = STICK_MIN;				
 318:	14 96       	adiw	r26, 0x04	; 4
 31a:	1c 92       	st	X, r1
 31c:	14 97       	sbiw	r26, 0x04	; 4
					ReportData->Button |= SWITCH_R;
 31e:	8d 91       	ld	r24, X+
 320:	9c 91       	ld	r25, X
 322:	11 97       	sbiw	r26, 0x01	; 1
 324:	80 62       	ori	r24, 0x20	; 32
					break;

				case TRIGGERS:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 326:	11 96       	adiw	r26, 0x01	; 1
 328:	9c 93       	st	X, r25
 32a:	8e 93       	st	-X, r24
					ReportData->RY = STICK_CENTER;
					ReportData->HAT = HAT_CENTER;
					break;
			}

			duration_count++;
 32c:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <duration_count>
 330:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <duration_count+0x1>
 334:	2f 5f       	subi	r18, 0xFF	; 255
 336:	3f 4f       	sbci	r19, 0xFF	; 255
 338:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <duration_count+0x1>
 33c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <duration_count>

			if (duration_count > step[bufindex].duration)
 340:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bufindex>
 344:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <bufindex+0x1>
 348:	fc 01       	movw	r30, r24
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	e8 0f       	add	r30, r24
 350:	f9 1f       	adc	r31, r25
 352:	e0 50       	subi	r30, 0x00	; 0
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	41 81       	ldd	r20, Z+1	; 0x01
 358:	52 81       	ldd	r21, Z+2	; 0x02
 35a:	42 17       	cp	r20, r18
 35c:	53 07       	cpc	r21, r19
 35e:	48 f4       	brcc	.+18     	; 0x372 <GetNextReport+0x16e>
			{
				bufindex++;
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <bufindex+0x1>
 366:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bufindex>
				duration_count = 0;				
 36a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <duration_count+0x1>
 36e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <duration_count>
			}


			if (bufindex > (int)( sizeof(step) / sizeof(step[0])) - 1)
 372:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bufindex>
 376:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <bufindex+0x1>
 37a:	09 97       	sbiw	r24, 0x09	; 9
 37c:	c4 f0       	brlt	.+48     	; 0x3ae <GetNextReport+0x1aa>
			{

				// state = CLEANUP;

				bufindex = 7;
 37e:	87 e0       	ldi	r24, 0x07	; 7
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <bufindex+0x1>
 386:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bufindex>
				duration_count = 0;
 38a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <duration_count+0x1>
 38e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <duration_count>

				state = BREATHE;
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>

				ReportData->LX = STICK_CENTER;
 398:	80 e8       	ldi	r24, 0x80	; 128
 39a:	13 96       	adiw	r26, 0x03	; 3
 39c:	8c 93       	st	X, r24
 39e:	13 97       	sbiw	r26, 0x03	; 3
				ReportData->LY = STICK_CENTER;
 3a0:	14 96       	adiw	r26, 0x04	; 4
 3a2:	8c 93       	st	X, r24
 3a4:	14 97       	sbiw	r26, 0x04	; 4
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <GetNextReport+0x1aa>
			}

			break;

		case CLEANUP:
			state = DONE;
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
	// if (state != SYNC_CONTROLLER && state != SYNC_POSITION)
	// 	if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
	// 		ReportData->Button |= SWITCH_A;

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	fd 01       	movw	r30, r26
 3b2:	ab e2       	ldi	r26, 0x2B	; 43
 3b4:	b1 e0       	ldi	r27, 0x01	; 1
 3b6:	01 90       	ld	r0, Z+
 3b8:	0d 92       	st	X+, r0
 3ba:	8a 95       	dec	r24
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <GetNextReport+0x1b2>
	echoes = ECHOES;
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <echoes+0x1>
 3c6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <echoes>
 3ca:	08 95       	ret

000003cc <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	28 97       	sbiw	r28, 0x08	; 8
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
 3e0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 3e4:	84 30       	cpi	r24, 0x04	; 4
 3e6:	89 f5       	brne	.+98     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
 3f2:	82 ff       	sbrs	r24, 2
 3f4:	12 c0       	rjmp	.+36     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
 3fa:	85 ff       	sbrs	r24, 5
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	67 e0       	ldi	r22, 0x07	; 7
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	ce 01       	movw	r24, r28
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	ba d0       	rcall	.+372    	; 0x580 <Endpoint_Read_Stream_LE>
 40c:	81 11       	cpse	r24, r1
 40e:	f7 cf       	rjmp	.-18     	; 0x3fe <HID_Task+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 410:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 414:	8b 77       	andi	r24, 0x7B	; 123
 416:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 420:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
 424:	80 ff       	sbrs	r24, 0
 426:	11 c0       	rjmp	.+34     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
 428:	ce 01       	movw	r24, r28
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	eb de       	rcall	.-554    	; 0x204 <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	68 e0       	ldi	r22, 0x08	; 8
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	58 d0       	rcall	.+176    	; 0x4ec <Endpoint_Write_Stream_LE>
 43c:	81 11       	cpse	r24, r1
 43e:	f7 cf       	rjmp	.-18     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 440:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 444:	8e 77       	andi	r24, 0x7E	; 126
 446:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
 44a:	28 96       	adiw	r28, 0x08	; 8
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <main>:
};

// Main entry point.
int main(void) {
	// We'll start by performing hardware and peripheral setup.
	SetupHardware();
 45c:	b0 de       	rcall	.-672    	; 0x1be <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 45e:	78 94       	sei
	GlobalInterruptEnable();
	// Once that's done, we'll enter an infinite loop.
	for (;;)
	{
		// We need to run our task to process and deliver data for our IN and OUT endpoints.
		HID_Task();
 460:	b5 df       	rcall	.-150    	; 0x3cc <HID_Task>
		// We also need to run the main USB management task.
		USB_USBTask();
 462:	a2 d4       	rcall	.+2372   	; 0xda8 <USB_USBTask>
	}
 464:	fd cf       	rjmp	.-6      	; 0x460 <main+0x4>

00000466 <CALLBACK_USB_GetDescriptor>:
 466:	29 2f       	mov	r18, r25
 468:	33 27       	eor	r19, r19
 46a:	23 30       	cpi	r18, 0x03	; 3
 46c:	31 05       	cpc	r19, r1
 46e:	e1 f0       	breq	.+56     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x42>
 470:	5c f4       	brge	.+22     	; 0x488 <CALLBACK_USB_GetDescriptor+0x22>
 472:	21 30       	cpi	r18, 0x01	; 1
 474:	31 05       	cpc	r19, r1
 476:	99 f0       	breq	.+38     	; 0x49e <CALLBACK_USB_GetDescriptor+0x38>
 478:	22 30       	cpi	r18, 0x02	; 2
 47a:	31 05       	cpc	r19, r1
 47c:	79 f5       	brne	.+94     	; 0x4dc <CALLBACK_USB_GetDescriptor+0x76>
 47e:	89 e2       	ldi	r24, 0x29	; 41
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	24 ef       	ldi	r18, 0xF4	; 244
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	2e c0       	rjmp	.+92     	; 0x4e4 <CALLBACK_USB_GetDescriptor+0x7e>
 488:	21 32       	cpi	r18, 0x21	; 33
 48a:	31 05       	cpc	r19, r1
 48c:	11 f1       	breq	.+68     	; 0x4d2 <CALLBACK_USB_GetDescriptor+0x6c>
 48e:	22 32       	cpi	r18, 0x22	; 34
 490:	31 05       	cpc	r19, r1
 492:	21 f5       	brne	.+72     	; 0x4dc <CALLBACK_USB_GetDescriptor+0x76>
 494:	86 e5       	ldi	r24, 0x56	; 86
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2f e2       	ldi	r18, 0x2F	; 47
 49a:	31 e0       	ldi	r19, 0x01	; 1
 49c:	23 c0       	rjmp	.+70     	; 0x4e4 <CALLBACK_USB_GetDescriptor+0x7e>
 49e:	82 e1       	ldi	r24, 0x12	; 18
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	2d e1       	ldi	r18, 0x1D	; 29
 4a4:	31 e0       	ldi	r19, 0x01	; 1
 4a6:	1e c0       	rjmp	.+60     	; 0x4e4 <CALLBACK_USB_GetDescriptor+0x7e>
 4a8:	99 27       	eor	r25, r25
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	91 05       	cpc	r25, r1
 4ae:	41 f0       	breq	.+16     	; 0x4c0 <CALLBACK_USB_GetDescriptor+0x5a>
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	91 05       	cpc	r25, r1
 4b4:	41 f0       	breq	.+16     	; 0x4c6 <CALLBACK_USB_GetDescriptor+0x60>
 4b6:	89 2b       	or	r24, r25
 4b8:	89 f4       	brne	.+34     	; 0x4dc <CALLBACK_USB_GetDescriptor+0x76>
 4ba:	e0 ef       	ldi	r30, 0xF0	; 240
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <CALLBACK_USB_GetDescriptor+0x64>
 4c0:	e2 ed       	ldi	r30, 0xD2	; 210
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <CALLBACK_USB_GetDescriptor+0x64>
 4c6:	ec ea       	ldi	r30, 0xAC	; 172
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	84 91       	lpm	r24, Z
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	9f 01       	movw	r18, r30
 4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <CALLBACK_USB_GetDescriptor+0x7e>
 4d2:	89 e0       	ldi	r24, 0x09	; 9
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	26 e0       	ldi	r18, 0x06	; 6
 4d8:	31 e0       	ldi	r19, 0x01	; 1
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <CALLBACK_USB_GetDescriptor+0x7e>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	fa 01       	movw	r30, r20
 4e6:	31 83       	std	Z+1, r19	; 0x01
 4e8:	20 83       	st	Z, r18
 4ea:	08 95       	ret

000004ec <Endpoint_Write_Stream_LE>:
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	ec 01       	movw	r28, r24
 4fe:	8b 01       	movw	r16, r22
 500:	7a 01       	movw	r14, r20
 502:	a1 d1       	rcall	.+834    	; 0x846 <Endpoint_WaitUntilReady>
 504:	81 11       	cpse	r24, r1
 506:	33 c0       	rjmp	.+102    	; 0x56e <Endpoint_Write_Stream_LE+0x82>
 508:	e1 14       	cp	r14, r1
 50a:	f1 04       	cpc	r15, r1
 50c:	39 f0       	breq	.+14     	; 0x51c <Endpoint_Write_Stream_LE+0x30>
 50e:	f7 01       	movw	r30, r14
 510:	80 81       	ld	r24, Z
 512:	91 81       	ldd	r25, Z+1	; 0x01
 514:	08 1b       	sub	r16, r24
 516:	19 0b       	sbc	r17, r25
 518:	c8 0f       	add	r28, r24
 51a:	d9 1f       	adc	r29, r25
 51c:	c1 2c       	mov	r12, r1
 51e:	d1 2c       	mov	r13, r1
 520:	01 15       	cp	r16, r1
 522:	11 05       	cpc	r17, r1
 524:	19 f1       	breq	.+70     	; 0x56c <Endpoint_Write_Stream_LE+0x80>
 526:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 52a:	85 fd       	sbrc	r24, 5
 52c:	16 c0       	rjmp	.+44     	; 0x55a <Endpoint_Write_Stream_LE+0x6e>
 52e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 532:	8e 77       	andi	r24, 0x7E	; 126
 534:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 538:	37 d4       	rcall	.+2158   	; 0xda8 <USB_USBTask>
 53a:	e1 14       	cp	r14, r1
 53c:	f1 04       	cpc	r15, r1
 53e:	49 f0       	breq	.+18     	; 0x552 <Endpoint_Write_Stream_LE+0x66>
 540:	f7 01       	movw	r30, r14
 542:	80 81       	ld	r24, Z
 544:	91 81       	ldd	r25, Z+1	; 0x01
 546:	c8 0e       	add	r12, r24
 548:	d9 1e       	adc	r13, r25
 54a:	d1 82       	std	Z+1, r13	; 0x01
 54c:	c0 82       	st	Z, r12
 54e:	85 e0       	ldi	r24, 0x05	; 5
 550:	0e c0       	rjmp	.+28     	; 0x56e <Endpoint_Write_Stream_LE+0x82>
 552:	79 d1       	rcall	.+754    	; 0x846 <Endpoint_WaitUntilReady>
 554:	88 23       	and	r24, r24
 556:	21 f3       	breq	.-56     	; 0x520 <Endpoint_Write_Stream_LE+0x34>
 558:	0a c0       	rjmp	.+20     	; 0x56e <Endpoint_Write_Stream_LE+0x82>
 55a:	89 91       	ld	r24, Y+
 55c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 560:	01 50       	subi	r16, 0x01	; 1
 562:	11 09       	sbc	r17, r1
 564:	ff ef       	ldi	r31, 0xFF	; 255
 566:	cf 1a       	sub	r12, r31
 568:	df 0a       	sbc	r13, r31
 56a:	da cf       	rjmp	.-76     	; 0x520 <Endpoint_Write_Stream_LE+0x34>
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	08 95       	ret

00000580 <Endpoint_Read_Stream_LE>:
 580:	cf 92       	push	r12
 582:	df 92       	push	r13
 584:	ef 92       	push	r14
 586:	ff 92       	push	r15
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	ec 01       	movw	r28, r24
 592:	8b 01       	movw	r16, r22
 594:	7a 01       	movw	r14, r20
 596:	57 d1       	rcall	.+686    	; 0x846 <Endpoint_WaitUntilReady>
 598:	81 11       	cpse	r24, r1
 59a:	33 c0       	rjmp	.+102    	; 0x602 <Endpoint_Read_Stream_LE+0x82>
 59c:	e1 14       	cp	r14, r1
 59e:	f1 04       	cpc	r15, r1
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <Endpoint_Read_Stream_LE+0x30>
 5a2:	f7 01       	movw	r30, r14
 5a4:	80 81       	ld	r24, Z
 5a6:	91 81       	ldd	r25, Z+1	; 0x01
 5a8:	08 1b       	sub	r16, r24
 5aa:	19 0b       	sbc	r17, r25
 5ac:	c8 0f       	add	r28, r24
 5ae:	d9 1f       	adc	r29, r25
 5b0:	c1 2c       	mov	r12, r1
 5b2:	d1 2c       	mov	r13, r1
 5b4:	01 15       	cp	r16, r1
 5b6:	11 05       	cpc	r17, r1
 5b8:	19 f1       	breq	.+70     	; 0x600 <Endpoint_Read_Stream_LE+0x80>
 5ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5be:	85 fd       	sbrc	r24, 5
 5c0:	16 c0       	rjmp	.+44     	; 0x5ee <Endpoint_Read_Stream_LE+0x6e>
 5c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5c6:	8b 77       	andi	r24, 0x7B	; 123
 5c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5cc:	ed d3       	rcall	.+2010   	; 0xda8 <USB_USBTask>
 5ce:	e1 14       	cp	r14, r1
 5d0:	f1 04       	cpc	r15, r1
 5d2:	49 f0       	breq	.+18     	; 0x5e6 <Endpoint_Read_Stream_LE+0x66>
 5d4:	f7 01       	movw	r30, r14
 5d6:	80 81       	ld	r24, Z
 5d8:	91 81       	ldd	r25, Z+1	; 0x01
 5da:	c8 0e       	add	r12, r24
 5dc:	d9 1e       	adc	r13, r25
 5de:	d1 82       	std	Z+1, r13	; 0x01
 5e0:	c0 82       	st	Z, r12
 5e2:	85 e0       	ldi	r24, 0x05	; 5
 5e4:	0e c0       	rjmp	.+28     	; 0x602 <Endpoint_Read_Stream_LE+0x82>
 5e6:	2f d1       	rcall	.+606    	; 0x846 <Endpoint_WaitUntilReady>
 5e8:	88 23       	and	r24, r24
 5ea:	21 f3       	breq	.-56     	; 0x5b4 <Endpoint_Read_Stream_LE+0x34>
 5ec:	0a c0       	rjmp	.+20     	; 0x602 <Endpoint_Read_Stream_LE+0x82>
 5ee:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 5f2:	89 93       	st	Y+, r24
 5f4:	01 50       	subi	r16, 0x01	; 1
 5f6:	11 09       	sbc	r17, r1
 5f8:	ff ef       	ldi	r31, 0xFF	; 255
 5fa:	cf 1a       	sub	r12, r31
 5fc:	df 0a       	sbc	r13, r31
 5fe:	da cf       	rjmp	.-76     	; 0x5b4 <Endpoint_Read_Stream_LE+0x34>
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	ff 90       	pop	r15
 60c:	ef 90       	pop	r14
 60e:	df 90       	pop	r13
 610:	cf 90       	pop	r12
 612:	08 95       	ret

00000614 <Endpoint_Write_Control_Stream_LE>:
 614:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <USB_ControlRequest+0x6>
 618:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <USB_ControlRequest+0x7>
 61c:	26 17       	cp	r18, r22
 61e:	37 07       	cpc	r19, r23
 620:	48 f0       	brcs	.+18     	; 0x634 <Endpoint_Write_Control_Stream_LE+0x20>
 622:	61 15       	cp	r22, r1
 624:	71 05       	cpc	r23, r1
 626:	39 f4       	brne	.+14     	; 0x636 <Endpoint_Write_Control_Stream_LE+0x22>
 628:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 62c:	2e 77       	andi	r18, 0x7E	; 126
 62e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 632:	01 c0       	rjmp	.+2      	; 0x636 <Endpoint_Write_Control_Stream_LE+0x22>
 634:	b9 01       	movw	r22, r18
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	61 15       	cp	r22, r1
 63a:	71 05       	cpc	r23, r1
 63c:	a9 f1       	breq	.+106    	; 0x6a8 <Endpoint_Write_Control_Stream_LE+0x94>
 63e:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <USB_DeviceState>
 642:	22 23       	and	r18, r18
 644:	09 f4       	brne	.+2      	; 0x648 <Endpoint_Write_Control_Stream_LE+0x34>
 646:	43 c0       	rjmp	.+134    	; 0x6ce <Endpoint_Write_Control_Stream_LE+0xba>
 648:	25 30       	cpi	r18, 0x05	; 5
 64a:	09 f4       	brne	.+2      	; 0x64e <Endpoint_Write_Control_Stream_LE+0x3a>
 64c:	42 c0       	rjmp	.+132    	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0xbe>
 64e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 652:	23 fd       	sbrc	r18, 3
 654:	40 c0       	rjmp	.+128    	; 0x6d6 <Endpoint_Write_Control_Stream_LE+0xc2>
 656:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 65a:	22 fd       	sbrc	r18, 2
 65c:	32 c0       	rjmp	.+100    	; 0x6c2 <Endpoint_Write_Control_Stream_LE+0xae>
 65e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 662:	20 ff       	sbrs	r18, 0
 664:	e9 cf       	rjmp	.-46     	; 0x638 <Endpoint_Write_Control_Stream_LE+0x24>
 666:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 66a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	34 2b       	or	r19, r20
 672:	fc 01       	movw	r30, r24
 674:	cf 01       	movw	r24, r30
 676:	61 15       	cp	r22, r1
 678:	71 05       	cpc	r23, r1
 67a:	59 f0       	breq	.+22     	; 0x692 <Endpoint_Write_Control_Stream_LE+0x7e>
 67c:	20 34       	cpi	r18, 0x40	; 64
 67e:	31 05       	cpc	r19, r1
 680:	40 f4       	brcc	.+16     	; 0x692 <Endpoint_Write_Control_Stream_LE+0x7e>
 682:	81 91       	ld	r24, Z+
 684:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 688:	61 50       	subi	r22, 0x01	; 1
 68a:	71 09       	sbc	r23, r1
 68c:	2f 5f       	subi	r18, 0xFF	; 255
 68e:	3f 4f       	sbci	r19, 0xFF	; 255
 690:	f1 cf       	rjmp	.-30     	; 0x674 <Endpoint_Write_Control_Stream_LE+0x60>
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	20 34       	cpi	r18, 0x40	; 64
 696:	31 05       	cpc	r19, r1
 698:	09 f0       	breq	.+2      	; 0x69c <Endpoint_Write_Control_Stream_LE+0x88>
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6a0:	2e 77       	andi	r18, 0x7E	; 126
 6a2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6a6:	c8 cf       	rjmp	.-112    	; 0x638 <Endpoint_Write_Control_Stream_LE+0x24>
 6a8:	41 11       	cpse	r20, r1
 6aa:	c9 cf       	rjmp	.-110    	; 0x63e <Endpoint_Write_Control_Stream_LE+0x2a>
 6ac:	0a c0       	rjmp	.+20     	; 0x6c2 <Endpoint_Write_Control_Stream_LE+0xae>
 6ae:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 6b2:	88 23       	and	r24, r24
 6b4:	61 f0       	breq	.+24     	; 0x6ce <Endpoint_Write_Control_Stream_LE+0xba>
 6b6:	85 30       	cpi	r24, 0x05	; 5
 6b8:	61 f0       	breq	.+24     	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0xbe>
 6ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6be:	83 fd       	sbrc	r24, 3
 6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <Endpoint_Write_Control_Stream_LE+0xc2>
 6c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c6:	82 ff       	sbrs	r24, 2
 6c8:	f2 cf       	rjmp	.-28     	; 0x6ae <Endpoint_Write_Control_Stream_LE+0x9a>
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	08 95       	ret
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	08 95       	ret
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	08 95       	ret
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	08 95       	ret

000006da <Endpoint_Write_Control_PStream_LE>:
 6da:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <USB_ControlRequest+0x6>
 6de:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <USB_ControlRequest+0x7>
 6e2:	26 17       	cp	r18, r22
 6e4:	37 07       	cpc	r19, r23
 6e6:	48 f0       	brcs	.+18     	; 0x6fa <Endpoint_Write_Control_PStream_LE+0x20>
 6e8:	61 15       	cp	r22, r1
 6ea:	71 05       	cpc	r23, r1
 6ec:	39 f4       	brne	.+14     	; 0x6fc <Endpoint_Write_Control_PStream_LE+0x22>
 6ee:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f2:	2e 77       	andi	r18, 0x7E	; 126
 6f4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <Endpoint_Write_Control_PStream_LE+0x22>
 6fa:	b9 01       	movw	r22, r18
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	61 15       	cp	r22, r1
 702:	71 05       	cpc	r23, r1
 704:	99 f1       	breq	.+102    	; 0x76c <Endpoint_Write_Control_PStream_LE+0x92>
 706:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 70a:	88 23       	and	r24, r24
 70c:	09 f4       	brne	.+2      	; 0x710 <Endpoint_Write_Control_PStream_LE+0x36>
 70e:	41 c0       	rjmp	.+130    	; 0x792 <Endpoint_Write_Control_PStream_LE+0xb8>
 710:	85 30       	cpi	r24, 0x05	; 5
 712:	09 f4       	brne	.+2      	; 0x716 <Endpoint_Write_Control_PStream_LE+0x3c>
 714:	40 c0       	rjmp	.+128    	; 0x796 <Endpoint_Write_Control_PStream_LE+0xbc>
 716:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 71a:	83 fd       	sbrc	r24, 3
 71c:	3e c0       	rjmp	.+124    	; 0x79a <Endpoint_Write_Control_PStream_LE+0xc0>
 71e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 722:	82 fd       	sbrc	r24, 2
 724:	30 c0       	rjmp	.+96     	; 0x786 <Endpoint_Write_Control_PStream_LE+0xac>
 726:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 72a:	80 ff       	sbrs	r24, 0
 72c:	e9 cf       	rjmp	.-46     	; 0x700 <Endpoint_Write_Control_PStream_LE+0x26>
 72e:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 732:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	92 2b       	or	r25, r18
 73a:	61 15       	cp	r22, r1
 73c:	71 05       	cpc	r23, r1
 73e:	59 f0       	breq	.+22     	; 0x756 <Endpoint_Write_Control_PStream_LE+0x7c>
 740:	80 34       	cpi	r24, 0x40	; 64
 742:	91 05       	cpc	r25, r1
 744:	40 f4       	brcc	.+16     	; 0x756 <Endpoint_Write_Control_PStream_LE+0x7c>
 746:	24 91       	lpm	r18, Z
 748:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 74c:	31 96       	adiw	r30, 0x01	; 1
 74e:	61 50       	subi	r22, 0x01	; 1
 750:	71 09       	sbc	r23, r1
 752:	01 96       	adiw	r24, 0x01	; 1
 754:	f2 cf       	rjmp	.-28     	; 0x73a <Endpoint_Write_Control_PStream_LE+0x60>
 756:	21 e0       	ldi	r18, 0x01	; 1
 758:	80 34       	cpi	r24, 0x40	; 64
 75a:	91 05       	cpc	r25, r1
 75c:	09 f0       	breq	.+2      	; 0x760 <Endpoint_Write_Control_PStream_LE+0x86>
 75e:	20 e0       	ldi	r18, 0x00	; 0
 760:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 764:	8e 77       	andi	r24, 0x7E	; 126
 766:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 76a:	ca cf       	rjmp	.-108    	; 0x700 <Endpoint_Write_Control_PStream_LE+0x26>
 76c:	21 11       	cpse	r18, r1
 76e:	cb cf       	rjmp	.-106    	; 0x706 <Endpoint_Write_Control_PStream_LE+0x2c>
 770:	0a c0       	rjmp	.+20     	; 0x786 <Endpoint_Write_Control_PStream_LE+0xac>
 772:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 776:	88 23       	and	r24, r24
 778:	61 f0       	breq	.+24     	; 0x792 <Endpoint_Write_Control_PStream_LE+0xb8>
 77a:	85 30       	cpi	r24, 0x05	; 5
 77c:	61 f0       	breq	.+24     	; 0x796 <Endpoint_Write_Control_PStream_LE+0xbc>
 77e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 782:	83 fd       	sbrc	r24, 3
 784:	0a c0       	rjmp	.+20     	; 0x79a <Endpoint_Write_Control_PStream_LE+0xc0>
 786:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 78a:	82 ff       	sbrs	r24, 2
 78c:	f2 cf       	rjmp	.-28     	; 0x772 <Endpoint_Write_Control_PStream_LE+0x98>
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	08 95       	ret
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	08 95       	ret
 796:	83 e0       	ldi	r24, 0x03	; 3
 798:	08 95       	ret
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	08 95       	ret

0000079e <Endpoint_ConfigureEndpoint_Prv>:
 79e:	98 2f       	mov	r25, r24
 7a0:	97 30       	cpi	r25, 0x07	; 7
 7a2:	58 f5       	brcc	.+86     	; 0x7fa <Endpoint_ConfigureEndpoint_Prv+0x5c>
 7a4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 7a8:	98 17       	cp	r25, r24
 7aa:	39 f0       	breq	.+14     	; 0x7ba <Endpoint_ConfigureEndpoint_Prv+0x1c>
 7ac:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 7b0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 7b4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <Endpoint_ConfigureEndpoint_Prv+0x22>
 7ba:	24 2f       	mov	r18, r20
 7bc:	76 2f       	mov	r23, r22
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	21 ff       	sbrs	r18, 1
 7c2:	19 c0       	rjmp	.+50     	; 0x7f6 <Endpoint_ConfigureEndpoint_Prv+0x58>
 7c4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7c8:	3e 7f       	andi	r19, 0xFE	; 254
 7ca:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7ce:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 7d2:	3d 7f       	andi	r19, 0xFD	; 253
 7d4:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 7d8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7dc:	31 60       	ori	r19, 0x01	; 1
 7de:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7e2:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 7e6:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 7ea:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 7ee:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 7f2:	27 ff       	sbrs	r18, 7
 7f4:	07 c0       	rjmp	.+14     	; 0x804 <Endpoint_ConfigureEndpoint_Prv+0x66>
 7f6:	9f 5f       	subi	r25, 0xFF	; 255
 7f8:	d3 cf       	rjmp	.-90     	; 0x7a0 <Endpoint_ConfigureEndpoint_Prv+0x2>
 7fa:	8f 70       	andi	r24, 0x0F	; 15
 7fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	08 95       	ret
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret

00000808 <Endpoint_ClearStatusStage>:
 808:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <USB_ControlRequest>
 80c:	87 ff       	sbrs	r24, 7
 80e:	11 c0       	rjmp	.+34     	; 0x832 <Endpoint_ClearStatusStage+0x2a>
 810:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 814:	82 fd       	sbrc	r24, 2
 816:	05 c0       	rjmp	.+10     	; 0x822 <Endpoint_ClearStatusStage+0x1a>
 818:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 81c:	81 11       	cpse	r24, r1
 81e:	f8 cf       	rjmp	.-16     	; 0x810 <Endpoint_ClearStatusStage+0x8>
 820:	11 c0       	rjmp	.+34     	; 0x844 <Endpoint_ClearStatusStage+0x3c>
 822:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 826:	8b 77       	andi	r24, 0x7B	; 123
 828:	0b c0       	rjmp	.+22     	; 0x840 <Endpoint_ClearStatusStage+0x38>
 82a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 82e:	88 23       	and	r24, r24
 830:	49 f0       	breq	.+18     	; 0x844 <Endpoint_ClearStatusStage+0x3c>
 832:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 836:	80 ff       	sbrs	r24, 0
 838:	f8 cf       	rjmp	.-16     	; 0x82a <Endpoint_ClearStatusStage+0x22>
 83a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 83e:	8e 77       	andi	r24, 0x7E	; 126
 840:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 844:	08 95       	ret

00000846 <Endpoint_WaitUntilReady>:
 846:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 84a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 84e:	95 e6       	ldi	r25, 0x65	; 101
 850:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 854:	84 2f       	mov	r24, r20
 856:	81 70       	andi	r24, 0x01	; 1
 858:	40 ff       	sbrs	r20, 0
 85a:	22 c0       	rjmp	.+68     	; 0x8a0 <Endpoint_WaitUntilReady+0x5a>
 85c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 860:	80 fd       	sbrc	r24, 0
 862:	1c c0       	rjmp	.+56     	; 0x89c <Endpoint_WaitUntilReady+0x56>
 864:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 868:	88 23       	and	r24, r24
 86a:	91 f0       	breq	.+36     	; 0x890 <Endpoint_WaitUntilReady+0x4a>
 86c:	85 30       	cpi	r24, 0x05	; 5
 86e:	91 f0       	breq	.+36     	; 0x894 <Endpoint_WaitUntilReady+0x4e>
 870:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 874:	85 fd       	sbrc	r24, 5
 876:	10 c0       	rjmp	.+32     	; 0x898 <Endpoint_WaitUntilReady+0x52>
 878:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 87c:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 880:	42 17       	cp	r20, r18
 882:	53 07       	cpc	r21, r19
 884:	29 f3       	breq	.-54     	; 0x850 <Endpoint_WaitUntilReady+0xa>
 886:	9a 01       	movw	r18, r20
 888:	91 50       	subi	r25, 0x01	; 1
 88a:	11 f7       	brne	.-60     	; 0x850 <Endpoint_WaitUntilReady+0xa>
 88c:	84 e0       	ldi	r24, 0x04	; 4
 88e:	08 95       	ret
 890:	82 e0       	ldi	r24, 0x02	; 2
 892:	08 95       	ret
 894:	83 e0       	ldi	r24, 0x03	; 3
 896:	08 95       	ret
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	08 95       	ret
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	08 95       	ret
 8a0:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8a4:	42 ff       	sbrs	r20, 2
 8a6:	de cf       	rjmp	.-68     	; 0x864 <Endpoint_WaitUntilReady+0x1e>
 8a8:	08 95       	ret

000008aa <USB_ResetInterface>:
 8aa:	0f 93       	push	r16
 8ac:	1f 93       	push	r17
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
 8b2:	4b d0       	rcall	.+150    	; 0x94a <USB_INT_DisableAllInterrupts>
 8b4:	52 d0       	rcall	.+164    	; 0x95a <USB_INT_ClearAllInterrupts>
 8b6:	c8 ed       	ldi	r28, 0xD8	; 216
 8b8:	d0 e0       	ldi	r29, 0x00	; 0
 8ba:	88 81       	ld	r24, Y
 8bc:	8f 77       	andi	r24, 0x7F	; 127
 8be:	88 83       	st	Y, r24
 8c0:	88 81       	ld	r24, Y
 8c2:	80 68       	ori	r24, 0x80	; 128
 8c4:	88 83       	st	Y, r24
 8c6:	88 81       	ld	r24, Y
 8c8:	8f 7d       	andi	r24, 0xDF	; 223
 8ca:	88 83       	st	Y, r24
 8cc:	19 bc       	out	0x29, r1	; 41
 8ce:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <USB_DeviceState>
 8d2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <USB_Device_ConfigurationNumber>
 8d6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <USB_Device_RemoteWakeupEnabled>
 8da:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <USB_Device_CurrentlySelfPowered>
 8de:	00 ee       	ldi	r16, 0xE0	; 224
 8e0:	10 e0       	ldi	r17, 0x00	; 0
 8e2:	f8 01       	movw	r30, r16
 8e4:	80 81       	ld	r24, Z
 8e6:	8b 7f       	andi	r24, 0xFB	; 251
 8e8:	80 83       	st	Z, r24
 8ea:	88 81       	ld	r24, Y
 8ec:	81 60       	ori	r24, 0x01	; 1
 8ee:	88 83       	st	Y, r24
 8f0:	42 e3       	ldi	r20, 0x32	; 50
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	53 df       	rcall	.-346    	; 0x79e <Endpoint_ConfigureEndpoint_Prv>
 8f8:	e1 ee       	ldi	r30, 0xE1	; 225
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	8e 7f       	andi	r24, 0xFE	; 254
 900:	80 83       	st	Z, r24
 902:	e2 ee       	ldi	r30, 0xE2	; 226
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	80 81       	ld	r24, Z
 908:	81 60       	ori	r24, 0x01	; 1
 90a:	80 83       	st	Z, r24
 90c:	80 81       	ld	r24, Z
 90e:	88 60       	ori	r24, 0x08	; 8
 910:	80 83       	st	Z, r24
 912:	f8 01       	movw	r30, r16
 914:	80 81       	ld	r24, Z
 916:	8e 7f       	andi	r24, 0xFE	; 254
 918:	80 83       	st	Z, r24
 91a:	88 81       	ld	r24, Y
 91c:	80 61       	ori	r24, 0x10	; 16
 91e:	88 83       	st	Y, r24
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	08 95       	ret

0000092a <USB_Init>:
 92a:	e8 ed       	ldi	r30, 0xD8	; 216
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
 930:	8f 7e       	andi	r24, 0xEF	; 239
 932:	80 83       	st	Z, r24
 934:	e7 ed       	ldi	r30, 0xD7	; 215
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	81 60       	ori	r24, 0x01	; 1
 93c:	80 83       	st	Z, r24
 93e:	84 e0       	ldi	r24, 0x04	; 4
 940:	82 bf       	out	0x32, r24	; 50
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USB_IsInitialized>
 948:	b0 cf       	rjmp	.-160    	; 0x8aa <USB_ResetInterface>

0000094a <USB_INT_DisableAllInterrupts>:
 94a:	e8 ed       	ldi	r30, 0xD8	; 216
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	8e 7f       	andi	r24, 0xFE	; 254
 952:	80 83       	st	Z, r24
 954:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 958:	08 95       	ret

0000095a <USB_INT_ClearAllInterrupts>:
 95a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 95e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 962:	08 95       	ret

00000964 <__vector_10>:
 964:	1f 92       	push	r1
 966:	0f 92       	push	r0
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	0f 92       	push	r0
 96c:	11 24       	eor	r1, r1
 96e:	2f 93       	push	r18
 970:	3f 93       	push	r19
 972:	4f 93       	push	r20
 974:	5f 93       	push	r21
 976:	6f 93       	push	r22
 978:	7f 93       	push	r23
 97a:	8f 93       	push	r24
 97c:	9f 93       	push	r25
 97e:	af 93       	push	r26
 980:	bf 93       	push	r27
 982:	ef 93       	push	r30
 984:	ff 93       	push	r31
 986:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 98a:	82 ff       	sbrs	r24, 2
 98c:	0a c0       	rjmp	.+20     	; 0x9a2 <__vector_10+0x3e>
 98e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 992:	82 ff       	sbrs	r24, 2
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <__vector_10+0x3e>
 996:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 99a:	8b 7f       	andi	r24, 0xFB	; 251
 99c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 9a0:	02 d2       	rcall	.+1028   	; 0xda6 <USB_Event_Stub>
 9a2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 9a6:	80 ff       	sbrs	r24, 0
 9a8:	1d c0       	rjmp	.+58     	; 0x9e4 <__vector_10+0x80>
 9aa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 9ae:	80 ff       	sbrs	r24, 0
 9b0:	19 c0       	rjmp	.+50     	; 0x9e4 <__vector_10+0x80>
 9b2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 9b6:	8e 7f       	andi	r24, 0xFE	; 254
 9b8:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 9bc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 9c0:	80 ff       	sbrs	r24, 0
 9c2:	0c c0       	rjmp	.+24     	; 0x9dc <__vector_10+0x78>
 9c4:	80 e1       	ldi	r24, 0x10	; 16
 9c6:	89 bd       	out	0x29, r24	; 41
 9c8:	82 e1       	ldi	r24, 0x12	; 18
 9ca:	89 bd       	out	0x29, r24	; 41
 9cc:	09 b4       	in	r0, 0x29	; 41
 9ce:	00 fe       	sbrs	r0, 0
 9d0:	fd cf       	rjmp	.-6      	; 0x9cc <__vector_10+0x68>
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>
 9d8:	0a dc       	rcall	.-2028   	; 0x1ee <EVENT_USB_Device_Connect>
 9da:	04 c0       	rjmp	.+8      	; 0x9e4 <__vector_10+0x80>
 9dc:	19 bc       	out	0x29, r1	; 41
 9de:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <USB_DeviceState>
 9e2:	06 dc       	rcall	.-2036   	; 0x1f0 <EVENT_USB_Device_Disconnect>
 9e4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 9e8:	80 ff       	sbrs	r24, 0
 9ea:	18 c0       	rjmp	.+48     	; 0xa1c <__vector_10+0xb8>
 9ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9f0:	80 ff       	sbrs	r24, 0
 9f2:	14 c0       	rjmp	.+40     	; 0xa1c <__vector_10+0xb8>
 9f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9f8:	8e 7f       	andi	r24, 0xFE	; 254
 9fa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a02:	80 61       	ori	r24, 0x10	; 16
 a04:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a08:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a0c:	80 62       	ori	r24, 0x20	; 32
 a0e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a12:	19 bc       	out	0x29, r1	; 41
 a14:	85 e0       	ldi	r24, 0x05	; 5
 a16:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>
 a1a:	c5 d1       	rcall	.+906    	; 0xda6 <USB_Event_Stub>
 a1c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a20:	84 ff       	sbrs	r24, 4
 a22:	2f c0       	rjmp	.+94     	; 0xa82 <__vector_10+0x11e>
 a24:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a28:	84 ff       	sbrs	r24, 4
 a2a:	2b c0       	rjmp	.+86     	; 0xa82 <__vector_10+0x11e>
 a2c:	80 e1       	ldi	r24, 0x10	; 16
 a2e:	89 bd       	out	0x29, r24	; 41
 a30:	82 e1       	ldi	r24, 0x12	; 18
 a32:	89 bd       	out	0x29, r24	; 41
 a34:	09 b4       	in	r0, 0x29	; 41
 a36:	00 fe       	sbrs	r0, 0
 a38:	fd cf       	rjmp	.-6      	; 0xa34 <__vector_10+0xd0>
 a3a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a3e:	8f 7d       	andi	r24, 0xDF	; 223
 a40:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a44:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a48:	8f 7e       	andi	r24, 0xEF	; 239
 a4a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a4e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a52:	8f 7e       	andi	r24, 0xEF	; 239
 a54:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a58:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a5c:	81 60       	ori	r24, 0x01	; 1
 a5e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a62:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_Device_ConfigurationNumber>
 a66:	88 23       	and	r24, r24
 a68:	11 f0       	breq	.+4      	; 0xa6e <__vector_10+0x10a>
 a6a:	84 e0       	ldi	r24, 0x04	; 4
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__vector_10+0x118>
 a6e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 a72:	87 fd       	sbrc	r24, 7
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <__vector_10+0x116>
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <__vector_10+0x118>
 a7a:	83 e0       	ldi	r24, 0x03	; 3
 a7c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>
 a80:	92 d1       	rcall	.+804    	; 0xda6 <USB_Event_Stub>
 a82:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a86:	83 ff       	sbrs	r24, 3
 a88:	22 c0       	rjmp	.+68     	; 0xace <__vector_10+0x16a>
 a8a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a8e:	83 ff       	sbrs	r24, 3
 a90:	1e c0       	rjmp	.+60     	; 0xace <__vector_10+0x16a>
 a92:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a96:	87 7f       	andi	r24, 0xF7	; 247
 a98:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a9c:	82 e0       	ldi	r24, 0x02	; 2
 a9e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>
 aa2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <USB_Device_ConfigurationNumber>
 aa6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 aaa:	8e 7f       	andi	r24, 0xFE	; 254
 aac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 ab0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ab4:	8e 7f       	andi	r24, 0xFE	; 254
 ab6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 aba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 abe:	80 61       	ori	r24, 0x10	; 16
 ac0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ac4:	42 e3       	ldi	r20, 0x32	; 50
 ac6:	60 e0       	ldi	r22, 0x00	; 0
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	69 de       	rcall	.-814    	; 0x79e <Endpoint_ConfigureEndpoint_Prv>
 acc:	6c d1       	rcall	.+728    	; 0xda6 <USB_Event_Stub>
 ace:	ff 91       	pop	r31
 ad0:	ef 91       	pop	r30
 ad2:	bf 91       	pop	r27
 ad4:	af 91       	pop	r26
 ad6:	9f 91       	pop	r25
 ad8:	8f 91       	pop	r24
 ada:	7f 91       	pop	r23
 adc:	6f 91       	pop	r22
 ade:	5f 91       	pop	r21
 ae0:	4f 91       	pop	r20
 ae2:	3f 91       	pop	r19
 ae4:	2f 91       	pop	r18
 ae6:	0f 90       	pop	r0
 ae8:	0f be       	out	0x3f, r0	; 63
 aea:	0f 90       	pop	r0
 aec:	1f 90       	pop	r1
 aee:	18 95       	reti

00000af0 <USB_Device_ProcessControlRequest>:
 af0:	1f 93       	push	r17
 af2:	cf 93       	push	r28
 af4:	df 93       	push	r29
 af6:	cd b7       	in	r28, 0x3d	; 61
 af8:	de b7       	in	r29, 0x3e	; 62
 afa:	aa 97       	sbiw	r28, 0x2a	; 42
 afc:	0f b6       	in	r0, 0x3f	; 63
 afe:	f8 94       	cli
 b00:	de bf       	out	0x3e, r29	; 62
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	cd bf       	out	0x3d, r28	; 61
 b06:	e8 e3       	ldi	r30, 0x38	; 56
 b08:	f1 e0       	ldi	r31, 0x01	; 1
 b0a:	88 e0       	ldi	r24, 0x08	; 8
 b0c:	8e 0f       	add	r24, r30
 b0e:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 b12:	91 93       	st	Z+, r25
 b14:	8e 13       	cpse	r24, r30
 b16:	fb cf       	rjmp	.-10     	; 0xb0e <__stack+0xf>
 b18:	74 db       	rcall	.-2328   	; 0x202 <EVENT_USB_Device_ControlRequest>
 b1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b1e:	83 ff       	sbrs	r24, 3
 b20:	2a c1       	rjmp	.+596    	; 0xd76 <__stack+0x277>
 b22:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <USB_ControlRequest>
 b26:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <USB_ControlRequest+0x1>
 b2a:	95 30       	cpi	r25, 0x05	; 5
 b2c:	09 f4       	brne	.+2      	; 0xb30 <__stack+0x31>
 b2e:	83 c0       	rjmp	.+262    	; 0xc36 <__stack+0x137>
 b30:	30 f4       	brcc	.+12     	; 0xb3e <__stack+0x3f>
 b32:	91 30       	cpi	r25, 0x01	; 1
 b34:	a9 f1       	breq	.+106    	; 0xba0 <__stack+0xa1>
 b36:	68 f0       	brcs	.+26     	; 0xb52 <__stack+0x53>
 b38:	93 30       	cpi	r25, 0x03	; 3
 b3a:	91 f1       	breq	.+100    	; 0xba0 <__stack+0xa1>
 b3c:	1c c1       	rjmp	.+568    	; 0xd76 <__stack+0x277>
 b3e:	98 30       	cpi	r25, 0x08	; 8
 b40:	09 f4       	brne	.+2      	; 0xb44 <__stack+0x45>
 b42:	ee c0       	rjmp	.+476    	; 0xd20 <__stack+0x221>
 b44:	99 30       	cpi	r25, 0x09	; 9
 b46:	09 f4       	brne	.+2      	; 0xb4a <__stack+0x4b>
 b48:	fa c0       	rjmp	.+500    	; 0xd3e <__stack+0x23f>
 b4a:	96 30       	cpi	r25, 0x06	; 6
 b4c:	09 f0       	breq	.+2      	; 0xb50 <__stack+0x51>
 b4e:	13 c1       	rjmp	.+550    	; 0xd76 <__stack+0x277>
 b50:	94 c0       	rjmp	.+296    	; 0xc7a <__stack+0x17b>
 b52:	80 38       	cpi	r24, 0x80	; 128
 b54:	21 f0       	breq	.+8      	; 0xb5e <__stack+0x5f>
 b56:	82 38       	cpi	r24, 0x82	; 130
 b58:	09 f0       	breq	.+2      	; 0xb5c <__stack+0x5d>
 b5a:	0d c1       	rjmp	.+538    	; 0xd76 <__stack+0x277>
 b5c:	08 c0       	rjmp	.+16     	; 0xb6e <__stack+0x6f>
 b5e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_Device_CurrentlySelfPowered>
 b62:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <USB_Device_RemoteWakeupEnabled>
 b66:	99 23       	and	r25, r25
 b68:	89 f0       	breq	.+34     	; 0xb8c <__stack+0x8d>
 b6a:	82 60       	ori	r24, 0x02	; 2
 b6c:	0f c0       	rjmp	.+30     	; 0xb8c <__stack+0x8d>
 b6e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x4>
 b72:	8f 70       	andi	r24, 0x0F	; 15
 b74:	87 30       	cpi	r24, 0x07	; 7
 b76:	08 f0       	brcs	.+2      	; 0xb7a <__stack+0x7b>
 b78:	fe c0       	rjmp	.+508    	; 0xd76 <__stack+0x277>
 b7a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b7e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b82:	85 fb       	bst	r24, 5
 b84:	88 27       	eor	r24, r24
 b86:	80 f9       	bld	r24, 0
 b88:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b8c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b90:	97 7f       	andi	r25, 0xF7	; 247
 b92:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b96:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 b9a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 b9e:	cb c0       	rjmp	.+406    	; 0xd36 <__stack+0x237>
 ba0:	28 2f       	mov	r18, r24
 ba2:	2d 7f       	andi	r18, 0xFD	; 253
 ba4:	09 f0       	breq	.+2      	; 0xba8 <__stack+0xa9>
 ba6:	e7 c0       	rjmp	.+462    	; 0xd76 <__stack+0x277>
 ba8:	88 23       	and	r24, r24
 baa:	19 f0       	breq	.+6      	; 0xbb2 <__stack+0xb3>
 bac:	82 30       	cpi	r24, 0x02	; 2
 bae:	61 f0       	breq	.+24     	; 0xbc8 <__stack+0xc9>
 bb0:	e2 c0       	rjmp	.+452    	; 0xd76 <__stack+0x277>
 bb2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 bb6:	81 30       	cpi	r24, 0x01	; 1
 bb8:	09 f0       	breq	.+2      	; 0xbbc <__stack+0xbd>
 bba:	dd c0       	rjmp	.+442    	; 0xd76 <__stack+0x277>
 bbc:	93 30       	cpi	r25, 0x03	; 3
 bbe:	09 f0       	breq	.+2      	; 0xbc2 <__stack+0xc3>
 bc0:	80 e0       	ldi	r24, 0x00	; 0
 bc2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_Device_RemoteWakeupEnabled>
 bc6:	2e c0       	rjmp	.+92     	; 0xc24 <__stack+0x125>
 bc8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 bcc:	81 11       	cpse	r24, r1
 bce:	2a c0       	rjmp	.+84     	; 0xc24 <__stack+0x125>
 bd0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x4>
 bd4:	8f 70       	andi	r24, 0x0F	; 15
 bd6:	2f ef       	ldi	r18, 0xFF	; 255
 bd8:	28 0f       	add	r18, r24
 bda:	26 30       	cpi	r18, 0x06	; 6
 bdc:	08 f0       	brcs	.+2      	; 0xbe0 <__stack+0xe1>
 bde:	cb c0       	rjmp	.+406    	; 0xd76 <__stack+0x277>
 be0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 be4:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 be8:	20 ff       	sbrs	r18, 0
 bea:	1c c0       	rjmp	.+56     	; 0xc24 <__stack+0x125>
 bec:	93 30       	cpi	r25, 0x03	; 3
 bee:	21 f4       	brne	.+8      	; 0xbf8 <__stack+0xf9>
 bf0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bf4:	80 62       	ori	r24, 0x20	; 32
 bf6:	14 c0       	rjmp	.+40     	; 0xc20 <__stack+0x121>
 bf8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bfc:	90 61       	ori	r25, 0x10	; 16
 bfe:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c02:	21 e0       	ldi	r18, 0x01	; 1
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	a9 01       	movw	r20, r18
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <__stack+0x10f>
 c0a:	44 0f       	add	r20, r20
 c0c:	55 1f       	adc	r21, r21
 c0e:	8a 95       	dec	r24
 c10:	e2 f7       	brpl	.-8      	; 0xc0a <__stack+0x10b>
 c12:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
 c16:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
 c1a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c1e:	88 60       	ori	r24, 0x08	; 8
 c20:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c24:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c2c:	87 7f       	andi	r24, 0xF7	; 247
 c2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c32:	ea dd       	rcall	.-1068   	; 0x808 <Endpoint_ClearStatusStage>
 c34:	a0 c0       	rjmp	.+320    	; 0xd76 <__stack+0x277>
 c36:	81 11       	cpse	r24, r1
 c38:	9e c0       	rjmp	.+316    	; 0xd76 <__stack+0x277>
 c3a:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 c3e:	1f 77       	andi	r17, 0x7F	; 127
 c40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c44:	80 78       	andi	r24, 0x80	; 128
 c46:	81 2b       	or	r24, r17
 c48:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c50:	87 7f       	andi	r24, 0xF7	; 247
 c52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c56:	d8 dd       	rcall	.-1104   	; 0x808 <Endpoint_ClearStatusStage>
 c58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c5c:	80 ff       	sbrs	r24, 0
 c5e:	fc cf       	rjmp	.-8      	; 0xc58 <__stack+0x159>
 c60:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c64:	80 68       	ori	r24, 0x80	; 128
 c66:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c6a:	11 11       	cpse	r17, r1
 c6c:	02 c0       	rjmp	.+4      	; 0xc72 <__stack+0x173>
 c6e:	82 e0       	ldi	r24, 0x02	; 2
 c70:	01 c0       	rjmp	.+2      	; 0xc74 <__stack+0x175>
 c72:	83 e0       	ldi	r24, 0x03	; 3
 c74:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>
 c78:	7e c0       	rjmp	.+252    	; 0xd76 <__stack+0x277>
 c7a:	80 58       	subi	r24, 0x80	; 128
 c7c:	82 30       	cpi	r24, 0x02	; 2
 c7e:	08 f0       	brcs	.+2      	; 0xc82 <__stack+0x183>
 c80:	7a c0       	rjmp	.+244    	; 0xd76 <__stack+0x277>
 c82:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 c86:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <USB_ControlRequest+0x3>
 c8a:	8c 3d       	cpi	r24, 0xDC	; 220
 c8c:	53 e0       	ldi	r21, 0x03	; 3
 c8e:	95 07       	cpc	r25, r21
 c90:	71 f5       	brne	.+92     	; 0xcee <__stack+0x1ef>
 c92:	83 e0       	ldi	r24, 0x03	; 3
 c94:	8a 83       	std	Y+2, r24	; 0x02
 c96:	8a e2       	ldi	r24, 0x2A	; 42
 c98:	89 83       	std	Y+1, r24	; 0x01
 c9a:	4f b7       	in	r20, 0x3f	; 63
 c9c:	f8 94       	cli
 c9e:	de 01       	movw	r26, r28
 ca0:	13 96       	adiw	r26, 0x03	; 3
 ca2:	20 e0       	ldi	r18, 0x00	; 0
 ca4:	3e e0       	ldi	r19, 0x0E	; 14
 ca6:	51 e2       	ldi	r21, 0x21	; 33
 ca8:	e3 2f       	mov	r30, r19
 caa:	f0 e0       	ldi	r31, 0x00	; 0
 cac:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 cb0:	e4 91       	lpm	r30, Z
 cb2:	20 ff       	sbrs	r18, 0
 cb4:	03 c0       	rjmp	.+6      	; 0xcbc <__stack+0x1bd>
 cb6:	e2 95       	swap	r30
 cb8:	ef 70       	andi	r30, 0x0F	; 15
 cba:	3f 5f       	subi	r19, 0xFF	; 255
 cbc:	ef 70       	andi	r30, 0x0F	; 15
 cbe:	8e 2f       	mov	r24, r30
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	ea 30       	cpi	r30, 0x0A	; 10
 cc4:	10 f0       	brcs	.+4      	; 0xcca <__stack+0x1cb>
 cc6:	c7 96       	adiw	r24, 0x37	; 55
 cc8:	01 c0       	rjmp	.+2      	; 0xccc <__stack+0x1cd>
 cca:	c0 96       	adiw	r24, 0x30	; 48
 ccc:	8d 93       	st	X+, r24
 cce:	9d 93       	st	X+, r25
 cd0:	2f 5f       	subi	r18, 0xFF	; 255
 cd2:	24 31       	cpi	r18, 0x14	; 20
 cd4:	49 f7       	brne	.-46     	; 0xca8 <__stack+0x1a9>
 cd6:	4f bf       	out	0x3f, r20	; 63
 cd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cdc:	87 7f       	andi	r24, 0xF7	; 247
 cde:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ce2:	6a e2       	ldi	r22, 0x2A	; 42
 ce4:	70 e0       	ldi	r23, 0x00	; 0
 ce6:	ce 01       	movw	r24, r28
 ce8:	01 96       	adiw	r24, 0x01	; 1
 cea:	94 dc       	rcall	.-1752   	; 0x614 <Endpoint_Write_Control_Stream_LE>
 cec:	13 c0       	rjmp	.+38     	; 0xd14 <__stack+0x215>
 cee:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <USB_ControlRequest+0x4>
 cf2:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <USB_ControlRequest+0x5>
 cf6:	ae 01       	movw	r20, r28
 cf8:	4f 5f       	subi	r20, 0xFF	; 255
 cfa:	5f 4f       	sbci	r21, 0xFF	; 255
 cfc:	b4 db       	rcall	.-2200   	; 0x466 <CALLBACK_USB_GetDescriptor>
 cfe:	bc 01       	movw	r22, r24
 d00:	89 2b       	or	r24, r25
 d02:	c9 f1       	breq	.+114    	; 0xd76 <__stack+0x277>
 d04:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d08:	97 7f       	andi	r25, 0xF7	; 247
 d0a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d0e:	89 81       	ldd	r24, Y+1	; 0x01
 d10:	9a 81       	ldd	r25, Y+2	; 0x02
 d12:	e3 dc       	rcall	.-1594   	; 0x6da <Endpoint_Write_Control_PStream_LE>
 d14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d18:	8b 77       	andi	r24, 0x7B	; 123
 d1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d1e:	2b c0       	rjmp	.+86     	; 0xd76 <__stack+0x277>
 d20:	80 38       	cpi	r24, 0x80	; 128
 d22:	49 f5       	brne	.+82     	; 0xd76 <__stack+0x277>
 d24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d28:	87 7f       	andi	r24, 0xF7	; 247
 d2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d2e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_Device_ConfigurationNumber>
 d32:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 d36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d3a:	8e 77       	andi	r24, 0x7E	; 126
 d3c:	78 cf       	rjmp	.-272    	; 0xc2e <__stack+0x12f>
 d3e:	81 11       	cpse	r24, r1
 d40:	1a c0       	rjmp	.+52     	; 0xd76 <__stack+0x277>
 d42:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 d46:	92 30       	cpi	r25, 0x02	; 2
 d48:	b0 f4       	brcc	.+44     	; 0xd76 <__stack+0x277>
 d4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d4e:	87 7f       	andi	r24, 0xF7	; 247
 d50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d54:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <USB_Device_ConfigurationNumber>
 d58:	57 dd       	rcall	.-1362   	; 0x808 <Endpoint_ClearStatusStage>
 d5a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_Device_ConfigurationNumber>
 d5e:	81 11       	cpse	r24, r1
 d60:	06 c0       	rjmp	.+12     	; 0xd6e <__stack+0x26f>
 d62:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 d66:	87 fd       	sbrc	r24, 7
 d68:	02 c0       	rjmp	.+4      	; 0xd6e <__stack+0x26f>
 d6a:	81 e0       	ldi	r24, 0x01	; 1
 d6c:	01 c0       	rjmp	.+2      	; 0xd70 <__stack+0x271>
 d6e:	84 e0       	ldi	r24, 0x04	; 4
 d70:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>
 d74:	3e da       	rcall	.-2948   	; 0x1f2 <EVENT_USB_Device_ConfigurationChanged>
 d76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d7a:	83 ff       	sbrs	r24, 3
 d7c:	0a c0       	rjmp	.+20     	; 0xd92 <__stack+0x293>
 d7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d82:	87 7f       	andi	r24, 0xF7	; 247
 d84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d88:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d8c:	80 62       	ori	r24, 0x20	; 32
 d8e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d92:	aa 96       	adiw	r28, 0x2a	; 42
 d94:	0f b6       	in	r0, 0x3f	; 63
 d96:	f8 94       	cli
 d98:	de bf       	out	0x3e, r29	; 62
 d9a:	0f be       	out	0x3f, r0	; 63
 d9c:	cd bf       	out	0x3d, r28	; 61
 d9e:	df 91       	pop	r29
 da0:	cf 91       	pop	r28
 da2:	1f 91       	pop	r17
 da4:	08 95       	ret

00000da6 <USB_Event_Stub>:
 da6:	08 95       	ret

00000da8 <USB_USBTask>:
 da8:	cf 93       	push	r28
 daa:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 dae:	88 23       	and	r24, r24
 db0:	99 f0       	breq	.+38     	; 0xdd8 <USB_USBTask+0x30>
 db2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 db6:	cf 70       	andi	r28, 0x0F	; 15
 db8:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 dbc:	89 2f       	mov	r24, r25
 dbe:	81 70       	andi	r24, 0x01	; 1
 dc0:	90 fd       	sbrc	r25, 0
 dc2:	80 e8       	ldi	r24, 0x80	; 128
 dc4:	c8 2b       	or	r28, r24
 dc6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 dca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dce:	83 fd       	sbrc	r24, 3
 dd0:	8f de       	rcall	.-738    	; 0xaf0 <USB_Device_ProcessControlRequest>
 dd2:	cf 70       	andi	r28, 0x0F	; 15
 dd4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 dd8:	cf 91       	pop	r28
 dda:	08 95       	ret

00000ddc <_exit>:
 ddc:	f8 94       	cli

00000dde <__stop_program>:
 dde:	ff cf       	rjmp	.-2      	; 0xdde <__stop_program>
